// Generated by gencpp from file socket_msg/socketMsg.msg
// DO NOT EDIT!


#ifndef SOCKET_MSG_MESSAGE_SOCKETMSG_H
#define SOCKET_MSG_MESSAGE_SOCKETMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace socket_msg
{
template <class ContainerAllocator>
struct socketMsg_
{
  typedef socketMsg_<ContainerAllocator> Type;

  socketMsg_()
    : header()
    , type()
    , eye_pos_x(0.0)
    , eye_pos_y(0.0)
    , status()
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  socketMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , eye_pos_x(0.0)
    , eye_pos_y(0.0)
    , status(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef float _eye_pos_x_type;
  _eye_pos_x_type eye_pos_x;

   typedef float _eye_pos_y_type;
  _eye_pos_y_type eye_pos_y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::socket_msg::socketMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::socket_msg::socketMsg_<ContainerAllocator> const> ConstPtr;

}; // struct socketMsg_

typedef ::socket_msg::socketMsg_<std::allocator<void> > socketMsg;

typedef boost::shared_ptr< ::socket_msg::socketMsg > socketMsgPtr;
typedef boost::shared_ptr< ::socket_msg::socketMsg const> socketMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::socket_msg::socketMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::socket_msg::socketMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace socket_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'socket_msg': ['/home/clivewong/github/HCR2018/ROS/main/src/socket_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::socket_msg::socketMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::socket_msg::socketMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::socket_msg::socketMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::socket_msg::socketMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::socket_msg::socketMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::socket_msg::socketMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::socket_msg::socketMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9611119fdc604d3e59abd191b890ce09";
  }

  static const char* value(const ::socket_msg::socketMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9611119fdc604d3eULL;
  static const uint64_t static_value2 = 0x59abd191b890ce09ULL;
};

template<class ContainerAllocator>
struct DataType< ::socket_msg::socketMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "socket_msg/socketMsg";
  }

  static const char* value(const ::socket_msg::socketMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::socket_msg::socketMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# socketMsg.msg\n\
\n\
Header header\n\
string type # To match which data to take {type: 'facial_recognition', eye_pos_x: pos_x, eye_pos_y: pos_y }\n\
\n\
float32 eye_pos_x\n\
float32 eye_pos_y\n\
\n\
string status\n\
float32 x\n\
float32 y\n\
float32 z\n\
# the rest of the data for the socket\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::socket_msg::socketMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::socket_msg::socketMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.eye_pos_x);
      stream.next(m.eye_pos_y);
      stream.next(m.status);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct socketMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::socket_msg::socketMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::socket_msg::socketMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "eye_pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.eye_pos_x);
    s << indent << "eye_pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.eye_pos_y);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOCKET_MSG_MESSAGE_SOCKETMSG_H
