#include <ros/ros.h>
#include <sensor_msgs/Joy.h>
#include "geometry_msgs/Twist.h"
//#include "hcr_vip/sonar_vip.h"
//#include "rosaria_client/sonar_vip.h"
#include <signal.h>
#include <termios.h>
#include "sensor_msgs/PointCloud.h"
#include "math.h"
#include "string.h"
#include "std_msgs/String.h"
#define PI 3.14159265
using geometry_msgs::Twist;
using namespace std;
int begin = 1;
//float sonar_truoc = 0;



class Listener
{
public:
  Listener();
  void sonarCallback(const sensor_msgs::PointCloud::ConstPtr& pointCloud);
//  void move(const geometry_msgs::Twist::ConstPtr& Twist);
private:
  ros::NodeHandle n;
  ros::Subscriber sub;
  ros::Publisher twist_pub_;
  double linear_, angular_, l_scale_, a_scale_;
  double sonar_truoc_x, sonar_truoc_y , sonar_sau_x, sonar_sau_y;
};
Listener::Listener():
  linear_(0),
  angular_(0),
  l_scale_(2.0),
  a_scale_(2.0)
{
  sub = n.subscribe("/sonar", 1000, &Listener::sonarCallback, this);
  twist_pub_ = n.advertise<geometry_msgs::Twist>("/cmd_vel", 1);
}

void Listener::sonarCallback(const sensor_msgs::PointCloud::ConstPtr& pointCloud)
{
//  cout << "So cam bien: " << pointCloud->points.size() << endl;
//  cout << pointCloud->points[3].x << endl;
  
  sonar_truoc_x = pointCloud->points[3].x;
  sonar_truoc_y = pointCloud->points[3].y;

  sonar_sau_x = -pointCloud->points[11].x;
  sonar_sau_y = -pointCloud->points[11].y;

  cout << "Truoc_x " << sonar_truoc_x <<  " Truoc_y " << sonar_truoc_y << " Sau_x: " 
  << sonar_sau_x << " Sau_y: " << sonar_sau_y << endl;

}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "sonar");
  Listener listener;
  ROS_INFO("hello");
  ros::NodeHandle n;

  while (1){
  ros::Subscriber sub = n.subscribe("/sonar", 1000, &Listener::sonarCallback, &listener);
  ros::spin();
  }
}



  
  

